initSidebarItems({"fn":[["choice",""],["eof",""],["failure","Create the failure combinator. It consume an stream and returning Err(msg)."],["fix","Create an fixed-point combinator. # Example ``` use psc::{fix, Parser}; let parser = fix(|it| Box::new(         char('1').and_r(it).or(char('0')))); // parser = '1' parser | '0'"],["pure","Create an Pure Combinator. The parser will not consume anything, but lift an value to a parser."]],"mod":[["common",""]],"struct":[["AndL","Sequence Combinator"],["AndR","Sequence Combinator"],["AndThen","Context Sensitive Sequence Combinator"],["App","Applicative Combinator"],["Chain","Sequence Combinator"],["Choice","Multiple Choice Combinator"],["Cons","Sequence Combinator"],["EOF","EOF Combinator"],["Failure","Failure Combinator"],["Fix","Fixed-point Combinator To deal with some recursion syntax."],["Join","Join Combinator"],["Many","Kleene Closure Combinator"],["Many_","Kleene Closure Combinator"],["Map","Map Combinator"],["Map2","Map2 Combinator"],["Or","Alternative Combinator"],["Pure","Pure Combinator"],["Snoc","Sequence Combinator"],["Some","Some Combinator"],["Some_","Some Combinator"],["Try","Try Combinator"]]});